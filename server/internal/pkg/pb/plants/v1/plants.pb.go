// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc2
// source: plants/v1/plants.proto

package plants_v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePlantV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image             string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Place             string                 `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
	Size              string                 `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Price             float32                `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	LightCondition    string                 `protobuf:"bytes,5,opt,name=lightCondition,proto3" json:"lightCondition,omitempty"`
	WateringFrequency string                 `protobuf:"bytes,6,opt,name=wateringFrequency,proto3" json:"wateringFrequency,omitempty"`
	TemperatureRegime string                 `protobuf:"bytes,7,opt,name=temperatureRegime,proto3" json:"temperatureRegime,omitempty"`
	CareComplexity    string                 `protobuf:"bytes,8,opt,name=care_complexity,json=careComplexity,proto3" json:"care_complexity,omitempty"`
	Description       string                 `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Type              string                 `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Species           string                 `protobuf:"bytes,11,opt,name=species,proto3" json:"species,omitempty"`
	CareRules         string                 `protobuf:"bytes,12,opt,name=care_rules,json=careRules,proto3" json:"care_rules,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UserId            string                 `protobuf:"bytes,14,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CreatePlantV1Request) Reset() {
	*x = CreatePlantV1Request{}
	mi := &file_plants_v1_plants_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlantV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlantV1Request) ProtoMessage() {}

func (x *CreatePlantV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlantV1Request.ProtoReflect.Descriptor instead.
func (*CreatePlantV1Request) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePlantV1Request) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreatePlantV1Request) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *CreatePlantV1Request) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CreatePlantV1Request) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreatePlantV1Request) GetLightCondition() string {
	if x != nil {
		return x.LightCondition
	}
	return ""
}

func (x *CreatePlantV1Request) GetWateringFrequency() string {
	if x != nil {
		return x.WateringFrequency
	}
	return ""
}

func (x *CreatePlantV1Request) GetTemperatureRegime() string {
	if x != nil {
		return x.TemperatureRegime
	}
	return ""
}

func (x *CreatePlantV1Request) GetCareComplexity() string {
	if x != nil {
		return x.CareComplexity
	}
	return ""
}

func (x *CreatePlantV1Request) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePlantV1Request) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreatePlantV1Request) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *CreatePlantV1Request) GetCareRules() string {
	if x != nil {
		return x.CareRules
	}
	return ""
}

func (x *CreatePlantV1Request) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreatePlantV1Request) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CreatePlantV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePlantV1Response) Reset() {
	*x = CreatePlantV1Response{}
	mi := &file_plants_v1_plants_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlantV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlantV1Response) ProtoMessage() {}

func (x *CreatePlantV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlantV1Response.ProtoReflect.Descriptor instead.
func (*CreatePlantV1Response) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{1}
}

type GetFilteredPlantsV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int64                              `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size   int64                              `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sort   string                             `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	IsDesc bool                               `protobuf:"varint,4,opt,name=isDesc,proto3" json:"isDesc,omitempty"`
	Filter *GetFilteredPlantsV1Request_Filter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetFilteredPlantsV1Request) Reset() {
	*x = GetFilteredPlantsV1Request{}
	mi := &file_plants_v1_plants_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFilteredPlantsV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilteredPlantsV1Request) ProtoMessage() {}

func (x *GetFilteredPlantsV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilteredPlantsV1Request.ProtoReflect.Descriptor instead.
func (*GetFilteredPlantsV1Request) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{2}
}

func (x *GetFilteredPlantsV1Request) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFilteredPlantsV1Request) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetFilteredPlantsV1Request) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetFilteredPlantsV1Request) GetIsDesc() bool {
	if x != nil {
		return x.IsDesc
	}
	return false
}

func (x *GetFilteredPlantsV1Request) GetFilter() *GetFilteredPlantsV1Request_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetFilteredPlantsV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plants []*GetFilteredPlantsV1Response_Plant `protobuf:"bytes,1,rep,name=plants,proto3" json:"plants,omitempty"`
}

func (x *GetFilteredPlantsV1Response) Reset() {
	*x = GetFilteredPlantsV1Response{}
	mi := &file_plants_v1_plants_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFilteredPlantsV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilteredPlantsV1Response) ProtoMessage() {}

func (x *GetFilteredPlantsV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilteredPlantsV1Response.ProtoReflect.Descriptor instead.
func (*GetFilteredPlantsV1Response) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{3}
}

func (x *GetFilteredPlantsV1Response) GetPlants() []*GetFilteredPlantsV1Response_Plant {
	if x != nil {
		return x.Plants
	}
	return nil
}

type GetPlantsV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size   int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sort   string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	IsDesc bool   `protobuf:"varint,4,opt,name=isDesc,proto3" json:"isDesc,omitempty"`
}

func (x *GetPlantsV1Request) Reset() {
	*x = GetPlantsV1Request{}
	mi := &file_plants_v1_plants_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantsV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantsV1Request) ProtoMessage() {}

func (x *GetPlantsV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantsV1Request.ProtoReflect.Descriptor instead.
func (*GetPlantsV1Request) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{4}
}

func (x *GetPlantsV1Request) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetPlantsV1Request) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetPlantsV1Request) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetPlantsV1Request) GetIsDesc() bool {
	if x != nil {
		return x.IsDesc
	}
	return false
}

type GetPlantsV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plants []*GetPlantsV1Response_Plant `protobuf:"bytes,1,rep,name=plants,proto3" json:"plants,omitempty"`
}

func (x *GetPlantsV1Response) Reset() {
	*x = GetPlantsV1Response{}
	mi := &file_plants_v1_plants_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantsV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantsV1Response) ProtoMessage() {}

func (x *GetPlantsV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantsV1Response.ProtoReflect.Descriptor instead.
func (*GetPlantsV1Response) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{5}
}

func (x *GetPlantsV1Response) GetPlants() []*GetPlantsV1Response_Plant {
	if x != nil {
		return x.Plants
	}
	return nil
}

type GetCareRuleV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Species string `protobuf:"bytes,1,opt,name=species,proto3" json:"species,omitempty"`
}

func (x *GetCareRuleV1Request) Reset() {
	*x = GetCareRuleV1Request{}
	mi := &file_plants_v1_plants_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCareRuleV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCareRuleV1Request) ProtoMessage() {}

func (x *GetCareRuleV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCareRuleV1Request.ProtoReflect.Descriptor instead.
func (*GetCareRuleV1Request) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{6}
}

func (x *GetCareRuleV1Request) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

type GetCareRuleV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CareRules []*CareRule `protobuf:"bytes,1,rep,name=careRules,proto3" json:"careRules,omitempty"`
}

func (x *GetCareRuleV1Response) Reset() {
	*x = GetCareRuleV1Response{}
	mi := &file_plants_v1_plants_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCareRuleV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCareRuleV1Response) ProtoMessage() {}

func (x *GetCareRuleV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCareRuleV1Response.ProtoReflect.Descriptor instead.
func (*GetCareRuleV1Response) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{7}
}

func (x *GetCareRuleV1Response) GetCareRules() []*CareRule {
	if x != nil {
		return x.CareRules
	}
	return nil
}

type CareRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *CareRule_User         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *CareRule) Reset() {
	*x = CareRule{}
	mi := &file_plants_v1_plants_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CareRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareRule) ProtoMessage() {}

func (x *CareRule) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareRule.ProtoReflect.Descriptor instead.
func (*CareRule) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{8}
}

func (x *CareRule) GetUser() *CareRule_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CareRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CareRule) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CreateNewCareRuleV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Species             string `protobuf:"bytes,1,opt,name=species,proto3" json:"species,omitempty"`
	UserId              string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	DescriptionAddition string `protobuf:"bytes,3,opt,name=descriptionAddition,proto3" json:"descriptionAddition,omitempty"`
}

func (x *CreateNewCareRuleV1Request) Reset() {
	*x = CreateNewCareRuleV1Request{}
	mi := &file_plants_v1_plants_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewCareRuleV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewCareRuleV1Request) ProtoMessage() {}

func (x *CreateNewCareRuleV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewCareRuleV1Request.ProtoReflect.Descriptor instead.
func (*CreateNewCareRuleV1Request) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNewCareRuleV1Request) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *CreateNewCareRuleV1Request) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateNewCareRuleV1Request) GetDescriptionAddition() string {
	if x != nil {
		return x.DescriptionAddition
	}
	return ""
}

type CreateNewCareRuleV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNewCareRuleV1Response) Reset() {
	*x = CreateNewCareRuleV1Response{}
	mi := &file_plants_v1_plants_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewCareRuleV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewCareRuleV1Response) ProtoMessage() {}

func (x *CreateNewCareRuleV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewCareRuleV1Response.ProtoReflect.Descriptor instead.
func (*CreateNewCareRuleV1Response) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{10}
}

type GetPlantsWithCareRulesV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPlantsWithCareRulesV1Request) Reset() {
	*x = GetPlantsWithCareRulesV1Request{}
	mi := &file_plants_v1_plants_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantsWithCareRulesV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantsWithCareRulesV1Request) ProtoMessage() {}

func (x *GetPlantsWithCareRulesV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantsWithCareRulesV1Request.ProtoReflect.Descriptor instead.
func (*GetPlantsWithCareRulesV1Request) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{11}
}

type GetPlantsWithCareRulesV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plants []*GetPlantsWithCareRulesV1Response_Plant `protobuf:"bytes,1,rep,name=plants,proto3" json:"plants,omitempty"`
}

func (x *GetPlantsWithCareRulesV1Response) Reset() {
	*x = GetPlantsWithCareRulesV1Response{}
	mi := &file_plants_v1_plants_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantsWithCareRulesV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantsWithCareRulesV1Response) ProtoMessage() {}

func (x *GetPlantsWithCareRulesV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantsWithCareRulesV1Response.ProtoReflect.Descriptor instead.
func (*GetPlantsWithCareRulesV1Response) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{12}
}

func (x *GetPlantsWithCareRulesV1Response) GetPlants() []*GetPlantsWithCareRulesV1Response_Plant {
	if x != nil {
		return x.Plants
	}
	return nil
}

type GetPlantByIdV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPlantByIdV1Request) Reset() {
	*x = GetPlantByIdV1Request{}
	mi := &file_plants_v1_plants_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantByIdV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantByIdV1Request) ProtoMessage() {}

func (x *GetPlantByIdV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantByIdV1Request.ProtoReflect.Descriptor instead.
func (*GetPlantByIdV1Request) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{13}
}

func (x *GetPlantByIdV1Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPlantByIdV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plant *GetPlantByIdV1Response_Plant `protobuf:"bytes,1,opt,name=plant,proto3" json:"plant,omitempty"`
	User  *GetPlantByIdV1Response_User  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetPlantByIdV1Response) Reset() {
	*x = GetPlantByIdV1Response{}
	mi := &file_plants_v1_plants_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantByIdV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantByIdV1Response) ProtoMessage() {}

func (x *GetPlantByIdV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantByIdV1Response.ProtoReflect.Descriptor instead.
func (*GetPlantByIdV1Response) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{14}
}

func (x *GetPlantByIdV1Response) GetPlant() *GetPlantByIdV1Response_Plant {
	if x != nil {
		return x.Plant
	}
	return nil
}

func (x *GetPlantByIdV1Response) GetUser() *GetPlantByIdV1Response_User {
	if x != nil {
		return x.User
	}
	return nil
}

type BuyPlantV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellerId string  `protobuf:"bytes,1,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	BuyerId  string  `protobuf:"bytes,2,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	PlantId  string  `protobuf:"bytes,3,opt,name=plantId,proto3" json:"plantId,omitempty"`
	Species  string  `protobuf:"bytes,4,opt,name=species,proto3" json:"species,omitempty"`
	Price    float32 `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *BuyPlantV1Request) Reset() {
	*x = BuyPlantV1Request{}
	mi := &file_plants_v1_plants_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuyPlantV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyPlantV1Request) ProtoMessage() {}

func (x *BuyPlantV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyPlantV1Request.ProtoReflect.Descriptor instead.
func (*BuyPlantV1Request) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{15}
}

func (x *BuyPlantV1Request) GetSellerId() string {
	if x != nil {
		return x.SellerId
	}
	return ""
}

func (x *BuyPlantV1Request) GetBuyerId() string {
	if x != nil {
		return x.BuyerId
	}
	return ""
}

func (x *BuyPlantV1Request) GetPlantId() string {
	if x != nil {
		return x.PlantId
	}
	return ""
}

func (x *BuyPlantV1Request) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *BuyPlantV1Request) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type BuyPlantV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuyPlantV1Response) Reset() {
	*x = BuyPlantV1Response{}
	mi := &file_plants_v1_plants_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuyPlantV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyPlantV1Response) ProtoMessage() {}

func (x *BuyPlantV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyPlantV1Response.ProtoReflect.Descriptor instead.
func (*BuyPlantV1Response) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{16}
}

type GetFilteredPlantsV1Request_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Species           string   `protobuf:"bytes,1,opt,name=species,proto3" json:"species,omitempty"`
	Type              string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size              []string `protobuf:"bytes,3,rep,name=size,proto3" json:"size,omitempty"`
	LightCondition    []string `protobuf:"bytes,4,rep,name=lightCondition,proto3" json:"lightCondition,omitempty"`
	WateringFrequency []string `protobuf:"bytes,5,rep,name=wateringFrequency,proto3" json:"wateringFrequency,omitempty"`
	TemperatureRegime []string `protobuf:"bytes,6,rep,name=temperatureRegime,proto3" json:"temperatureRegime,omitempty"`
	CareComplexity    []string `protobuf:"bytes,7,rep,name=careComplexity,proto3" json:"careComplexity,omitempty"`
	Description       string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Place             string   `protobuf:"bytes,9,opt,name=place,proto3" json:"place,omitempty"`
	PriceFrom         float32  `protobuf:"fixed32,10,opt,name=priceFrom,proto3" json:"priceFrom,omitempty"`
	PriceTo           float32  `protobuf:"fixed32,11,opt,name=priceTo,proto3" json:"priceTo,omitempty"`
}

func (x *GetFilteredPlantsV1Request_Filter) Reset() {
	*x = GetFilteredPlantsV1Request_Filter{}
	mi := &file_plants_v1_plants_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFilteredPlantsV1Request_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilteredPlantsV1Request_Filter) ProtoMessage() {}

func (x *GetFilteredPlantsV1Request_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilteredPlantsV1Request_Filter.ProtoReflect.Descriptor instead.
func (*GetFilteredPlantsV1Request_Filter) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetFilteredPlantsV1Request_Filter) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *GetFilteredPlantsV1Request_Filter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetFilteredPlantsV1Request_Filter) GetSize() []string {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *GetFilteredPlantsV1Request_Filter) GetLightCondition() []string {
	if x != nil {
		return x.LightCondition
	}
	return nil
}

func (x *GetFilteredPlantsV1Request_Filter) GetWateringFrequency() []string {
	if x != nil {
		return x.WateringFrequency
	}
	return nil
}

func (x *GetFilteredPlantsV1Request_Filter) GetTemperatureRegime() []string {
	if x != nil {
		return x.TemperatureRegime
	}
	return nil
}

func (x *GetFilteredPlantsV1Request_Filter) GetCareComplexity() []string {
	if x != nil {
		return x.CareComplexity
	}
	return nil
}

func (x *GetFilteredPlantsV1Request_Filter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetFilteredPlantsV1Request_Filter) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *GetFilteredPlantsV1Request_Filter) GetPriceFrom() float32 {
	if x != nil {
		return x.PriceFrom
	}
	return 0
}

func (x *GetFilteredPlantsV1Request_Filter) GetPriceTo() float32 {
	if x != nil {
		return x.PriceTo
	}
	return 0
}

type GetFilteredPlantsV1Response_Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image     string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Species   string                 `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	Price     float32                `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Place     string                 `protobuf:"bytes,6,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *GetFilteredPlantsV1Response_Plant) Reset() {
	*x = GetFilteredPlantsV1Response_Plant{}
	mi := &file_plants_v1_plants_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFilteredPlantsV1Response_Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilteredPlantsV1Response_Plant) ProtoMessage() {}

func (x *GetFilteredPlantsV1Response_Plant) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilteredPlantsV1Response_Plant.ProtoReflect.Descriptor instead.
func (*GetFilteredPlantsV1Response_Plant) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetFilteredPlantsV1Response_Plant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetFilteredPlantsV1Response_Plant) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetFilteredPlantsV1Response_Plant) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *GetFilteredPlantsV1Response_Plant) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetFilteredPlantsV1Response_Plant) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetFilteredPlantsV1Response_Plant) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

type GetPlantsV1Response_Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image     string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Species   string                 `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	Price     float32                `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Place     string                 `protobuf:"bytes,6,opt,name=place,proto3" json:"place,omitempty"`
}

func (x *GetPlantsV1Response_Plant) Reset() {
	*x = GetPlantsV1Response_Plant{}
	mi := &file_plants_v1_plants_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantsV1Response_Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantsV1Response_Plant) ProtoMessage() {}

func (x *GetPlantsV1Response_Plant) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantsV1Response_Plant.ProtoReflect.Descriptor instead.
func (*GetPlantsV1Response_Plant) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetPlantsV1Response_Plant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPlantsV1Response_Plant) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetPlantsV1Response_Plant) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *GetPlantsV1Response_Plant) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetPlantsV1Response_Plant) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetPlantsV1Response_Plant) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

type CareRule_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName       string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	UserSurname    string `protobuf:"bytes,3,opt,name=userSurname,proto3" json:"userSurname,omitempty"`
	UserFatherName string `protobuf:"bytes,4,opt,name=userFatherName,proto3" json:"userFatherName,omitempty"`
}

func (x *CareRule_User) Reset() {
	*x = CareRule_User{}
	mi := &file_plants_v1_plants_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CareRule_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareRule_User) ProtoMessage() {}

func (x *CareRule_User) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareRule_User.ProtoReflect.Descriptor instead.
func (*CareRule_User) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CareRule_User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CareRule_User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CareRule_User) GetUserSurname() string {
	if x != nil {
		return x.UserSurname
	}
	return ""
}

func (x *CareRule_User) GetUserFatherName() string {
	if x != nil {
		return x.UserFatherName
	}
	return ""
}

type GetPlantsWithCareRulesV1Response_Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Species string `protobuf:"bytes,1,opt,name=species,proto3" json:"species,omitempty"`
	Image   string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPlantsWithCareRulesV1Response_Plant) Reset() {
	*x = GetPlantsWithCareRulesV1Response_Plant{}
	mi := &file_plants_v1_plants_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantsWithCareRulesV1Response_Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantsWithCareRulesV1Response_Plant) ProtoMessage() {}

func (x *GetPlantsWithCareRulesV1Response_Plant) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantsWithCareRulesV1Response_Plant.ProtoReflect.Descriptor instead.
func (*GetPlantsWithCareRulesV1Response_Plant) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GetPlantsWithCareRulesV1Response_Plant) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *GetPlantsWithCareRulesV1Response_Plant) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetPlantsWithCareRulesV1Response_Plant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPlantByIdV1Response_Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Species           string  `protobuf:"bytes,1,opt,name=species,proto3" json:"species,omitempty"`
	Type              string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size              string  `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	LightCondition    string  `protobuf:"bytes,4,opt,name=lightCondition,proto3" json:"lightCondition,omitempty"`
	WateringFrequency string  `protobuf:"bytes,5,opt,name=wateringFrequency,proto3" json:"wateringFrequency,omitempty"`
	TemperatureRegime string  `protobuf:"bytes,6,opt,name=temperatureRegime,proto3" json:"temperatureRegime,omitempty"`
	CareComplexity    string  `protobuf:"bytes,7,opt,name=careComplexity,proto3" json:"careComplexity,omitempty"`
	Description       string  `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Place             string  `protobuf:"bytes,9,opt,name=place,proto3" json:"place,omitempty"`
	Image             string  `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	Price             float32 `protobuf:"fixed32,11,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *GetPlantByIdV1Response_Plant) Reset() {
	*x = GetPlantByIdV1Response_Plant{}
	mi := &file_plants_v1_plants_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantByIdV1Response_Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantByIdV1Response_Plant) ProtoMessage() {}

func (x *GetPlantByIdV1Response_Plant) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantByIdV1Response_Plant.ProtoReflect.Descriptor instead.
func (*GetPlantByIdV1Response_Plant) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetPlantByIdV1Response_Plant) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetLightCondition() string {
	if x != nil {
		return x.LightCondition
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetWateringFrequency() string {
	if x != nil {
		return x.WateringFrequency
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetTemperatureRegime() string {
	if x != nil {
		return x.TemperatureRegime
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetCareComplexity() string {
	if x != nil {
		return x.CareComplexity
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetPlantByIdV1Response_Plant) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type GetPlantByIdV1Response_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Photo      string `protobuf:"bytes,1,opt,name=photo,proto3" json:"photo,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Surname    string `protobuf:"bytes,3,opt,name=surname,proto3" json:"surname,omitempty"`
	FatherName string `protobuf:"bytes,4,opt,name=fatherName,proto3" json:"fatherName,omitempty"`
}

func (x *GetPlantByIdV1Response_User) Reset() {
	*x = GetPlantByIdV1Response_User{}
	mi := &file_plants_v1_plants_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlantByIdV1Response_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlantByIdV1Response_User) ProtoMessage() {}

func (x *GetPlantByIdV1Response_User) ProtoReflect() protoreflect.Message {
	mi := &file_plants_v1_plants_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlantByIdV1Response_User.ProtoReflect.Descriptor instead.
func (*GetPlantByIdV1Response_User) Descriptor() ([]byte, []int) {
	return file_plants_v1_plants_proto_rawDescGZIP(), []int{14, 1}
}

func (x *GetPlantByIdV1Response_User) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *GetPlantByIdV1Response_User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPlantByIdV1Response_User) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *GetPlantByIdV1Response_User) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

var File_plants_v1_plants_proto protoreflect.FileDescriptor

var file_plants_v1_plants_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xda, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x04, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x44, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0xe6, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x1a, 0xad, 0x01, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x22, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0x83, 0x02, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x1a, 0xad, 0x01, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x22, 0x30, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x56,
	0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9b,
	0x02, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x84, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x1a, 0x47, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xdb, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0xd9, 0x02, 0x0a, 0x05, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x6a, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x42, 0x75, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x56, 0x31,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x42, 0x75, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd9, 0x07,
	0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x50, 0x49, 0x12, 0x86, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x31, 0x12, 0x2a, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61,
	0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x61, 0x72, 0x65, 0x12, 0x7e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x25, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x65,
	0x2f, 0x6e, 0x65, 0x77, 0x12, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x56, 0x31, 0x12, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x56,
	0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x6c, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x56, 0x31, 0x12, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x31,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x56,
	0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2f, 0x7b, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x7d, 0x12, 0x76, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x56, 0x31, 0x12, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x67, 0x65, 0x7d,
	0x2f, 0x7b, 0x73, 0x69, 0x7a, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x6f, 0x72, 0x74, 0x7d, 0x12, 0x6e,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x56, 0x31, 0x12,
	0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x12, 0x91,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x12, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x6c, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x61, 0x67, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x69, 0x7a, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x6f, 0x72,
	0x74, 0x7d, 0x12, 0x65, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x56, 0x31,
	0x12, 0x1c, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x75, 0x79, 0x42, 0x15, 0x5a, 0x13, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plants_v1_plants_proto_rawDescOnce sync.Once
	file_plants_v1_plants_proto_rawDescData = file_plants_v1_plants_proto_rawDesc
)

func file_plants_v1_plants_proto_rawDescGZIP() []byte {
	file_plants_v1_plants_proto_rawDescOnce.Do(func() {
		file_plants_v1_plants_proto_rawDescData = protoimpl.X.CompressGZIP(file_plants_v1_plants_proto_rawDescData)
	})
	return file_plants_v1_plants_proto_rawDescData
}

var file_plants_v1_plants_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_plants_v1_plants_proto_goTypes = []any{
	(*CreatePlantV1Request)(nil),                   // 0: plants.v1.CreatePlantV1Request
	(*CreatePlantV1Response)(nil),                  // 1: plants.v1.CreatePlantV1Response
	(*GetFilteredPlantsV1Request)(nil),             // 2: plants.v1.GetFilteredPlantsV1Request
	(*GetFilteredPlantsV1Response)(nil),            // 3: plants.v1.GetFilteredPlantsV1Response
	(*GetPlantsV1Request)(nil),                     // 4: plants.v1.GetPlantsV1Request
	(*GetPlantsV1Response)(nil),                    // 5: plants.v1.GetPlantsV1Response
	(*GetCareRuleV1Request)(nil),                   // 6: plants.v1.GetCareRuleV1Request
	(*GetCareRuleV1Response)(nil),                  // 7: plants.v1.GetCareRuleV1Response
	(*CareRule)(nil),                               // 8: plants.v1.CareRule
	(*CreateNewCareRuleV1Request)(nil),             // 9: plants.v1.CreateNewCareRuleV1Request
	(*CreateNewCareRuleV1Response)(nil),            // 10: plants.v1.CreateNewCareRuleV1Response
	(*GetPlantsWithCareRulesV1Request)(nil),        // 11: plants.v1.GetPlantsWithCareRulesV1Request
	(*GetPlantsWithCareRulesV1Response)(nil),       // 12: plants.v1.GetPlantsWithCareRulesV1Response
	(*GetPlantByIdV1Request)(nil),                  // 13: plants.v1.GetPlantByIdV1Request
	(*GetPlantByIdV1Response)(nil),                 // 14: plants.v1.GetPlantByIdV1Response
	(*BuyPlantV1Request)(nil),                      // 15: plants.v1.BuyPlantV1Request
	(*BuyPlantV1Response)(nil),                     // 16: plants.v1.BuyPlantV1Response
	(*GetFilteredPlantsV1Request_Filter)(nil),      // 17: plants.v1.GetFilteredPlantsV1Request.Filter
	(*GetFilteredPlantsV1Response_Plant)(nil),      // 18: plants.v1.GetFilteredPlantsV1Response.Plant
	(*GetPlantsV1Response_Plant)(nil),              // 19: plants.v1.GetPlantsV1Response.Plant
	(*CareRule_User)(nil),                          // 20: plants.v1.CareRule.User
	(*GetPlantsWithCareRulesV1Response_Plant)(nil), // 21: plants.v1.GetPlantsWithCareRulesV1Response.Plant
	(*GetPlantByIdV1Response_Plant)(nil),           // 22: plants.v1.GetPlantByIdV1Response.Plant
	(*GetPlantByIdV1Response_User)(nil),            // 23: plants.v1.GetPlantByIdV1Response.User
	(*timestamppb.Timestamp)(nil),                  // 24: google.protobuf.Timestamp
}
var file_plants_v1_plants_proto_depIdxs = []int32{
	24, // 0: plants.v1.CreatePlantV1Request.createdAt:type_name -> google.protobuf.Timestamp
	17, // 1: plants.v1.GetFilteredPlantsV1Request.filter:type_name -> plants.v1.GetFilteredPlantsV1Request.Filter
	18, // 2: plants.v1.GetFilteredPlantsV1Response.plants:type_name -> plants.v1.GetFilteredPlantsV1Response.Plant
	19, // 3: plants.v1.GetPlantsV1Response.plants:type_name -> plants.v1.GetPlantsV1Response.Plant
	8,  // 4: plants.v1.GetCareRuleV1Response.careRules:type_name -> plants.v1.CareRule
	20, // 5: plants.v1.CareRule.user:type_name -> plants.v1.CareRule.User
	24, // 6: plants.v1.CareRule.createdAt:type_name -> google.protobuf.Timestamp
	21, // 7: plants.v1.GetPlantsWithCareRulesV1Response.plants:type_name -> plants.v1.GetPlantsWithCareRulesV1Response.Plant
	22, // 8: plants.v1.GetPlantByIdV1Response.plant:type_name -> plants.v1.GetPlantByIdV1Response.Plant
	23, // 9: plants.v1.GetPlantByIdV1Response.user:type_name -> plants.v1.GetPlantByIdV1Response.User
	24, // 10: plants.v1.GetFilteredPlantsV1Response.Plant.createdAt:type_name -> google.protobuf.Timestamp
	24, // 11: plants.v1.GetPlantsV1Response.Plant.createdAt:type_name -> google.protobuf.Timestamp
	11, // 12: plants.v1.PlantsAPI.GetPlantsWithCareRulesV1:input_type -> plants.v1.GetPlantsWithCareRulesV1Request
	9,  // 13: plants.v1.PlantsAPI.CreateNewCareRuleV1:input_type -> plants.v1.CreateNewCareRuleV1Request
	13, // 14: plants.v1.PlantsAPI.GetPlantByIdV1:input_type -> plants.v1.GetPlantByIdV1Request
	6,  // 15: plants.v1.PlantsAPI.GetCareRuleV1:input_type -> plants.v1.GetCareRuleV1Request
	4,  // 16: plants.v1.PlantsAPI.GetPlantsV1:input_type -> plants.v1.GetPlantsV1Request
	0,  // 17: plants.v1.PlantsAPI.CreatePlantV1:input_type -> plants.v1.CreatePlantV1Request
	2,  // 18: plants.v1.PlantsAPI.GetFilteredPlantsV1:input_type -> plants.v1.GetFilteredPlantsV1Request
	15, // 19: plants.v1.PlantsAPI.BuyPlantV1:input_type -> plants.v1.BuyPlantV1Request
	12, // 20: plants.v1.PlantsAPI.GetPlantsWithCareRulesV1:output_type -> plants.v1.GetPlantsWithCareRulesV1Response
	10, // 21: plants.v1.PlantsAPI.CreateNewCareRuleV1:output_type -> plants.v1.CreateNewCareRuleV1Response
	14, // 22: plants.v1.PlantsAPI.GetPlantByIdV1:output_type -> plants.v1.GetPlantByIdV1Response
	7,  // 23: plants.v1.PlantsAPI.GetCareRuleV1:output_type -> plants.v1.GetCareRuleV1Response
	5,  // 24: plants.v1.PlantsAPI.GetPlantsV1:output_type -> plants.v1.GetPlantsV1Response
	1,  // 25: plants.v1.PlantsAPI.CreatePlantV1:output_type -> plants.v1.CreatePlantV1Response
	3,  // 26: plants.v1.PlantsAPI.GetFilteredPlantsV1:output_type -> plants.v1.GetFilteredPlantsV1Response
	16, // 27: plants.v1.PlantsAPI.BuyPlantV1:output_type -> plants.v1.BuyPlantV1Response
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_plants_v1_plants_proto_init() }
func file_plants_v1_plants_proto_init() {
	if File_plants_v1_plants_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plants_v1_plants_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plants_v1_plants_proto_goTypes,
		DependencyIndexes: file_plants_v1_plants_proto_depIdxs,
		MessageInfos:      file_plants_v1_plants_proto_msgTypes,
	}.Build()
	File_plants_v1_plants_proto = out.File
	file_plants_v1_plants_proto_rawDesc = nil
	file_plants_v1_plants_proto_goTypes = nil
	file_plants_v1_plants_proto_depIdxs = nil
}
